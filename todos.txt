TODO: print actually useful info on the screen
 - a dot for every hopper_step retry (and debug info if the dots get too numerous)
 - the stage hopper_step is currently in (for performance profiling)
 - number of sources and destinations
 - transfer count for the last iteration (useful with void)
 - a console to type one-off hopper commands
 - a better way to view dozens of commands separated by `/`

TODO: fix build script situation
	- the built output should not be committed alongside everything else, as that results in duplication
		- teal also does this but they do it for a reason

TODO TODO TODO: special error when trying to push/pull to turtles without using `self`
	- currently it just silently fails???

TODO: fix performance of partial stack transfers

TODO: `-also` for having multiple sets of filters in a single `/` command (useful for autocrafting)

TODO: pipeline autocrafting by supplying a reference recipe in a dropper

TODO: more options for hopper.list()
	- implement filters and aggregations using `void` and `inform_limit` (in order to reuse code)

TODO: virtual chests
	- inserting items doesn't actually move anything
	- taking out items takes them out of the original chest
	- *this will require inventory persistency across operations*


TODO: parallelism! (for massive furnace stacks and other massive logistics)
	make an option to increase scanning threads

	parallelize `/` syntax (should behave like `bg`, essentially)

	transfers will be assumed to succeed and then pushed onto a queue for later execution
	when the queue is full, flush it by executing all operations in parallel
	merging of operations can also be done
		can this be deduplicated with TIL somehow?
			maybe by creating some super generic module that simultaneously handles the needs of both hopper and til
			it's better to just implement parallelism for hopper first, though.

		til has to be edited to support being called in parallel
			do calculations in two parts: optimistically before transfer (subtract and add full amounts)
			then realistically based on real transfer

	parallel transfers should be opt-in, as they can mess up transfer logic upon failure

FIXME: propagate and reset errors correctly


TODO: rewrite some of the code to utilize peripheral.getType


TODO: some way to treat chests as queues
	- -queue flag to mark a chest as a queue
	- keep track of start and end using the empty slots
	possible use: feeding botania flowers items in order

TODO: fluid support for ME bridge
TODO: use `.getItemLimit()` to handle drawers and other things better
	- and if limit is 2.1 billion then ??????

TODO: better errors with debug.traceback and xpcall

TODO: staggered startup (sleep between 0 and 20 ticks on startup)
TODO: -nap for shorter sleeps some period after a successful transfer (-nap 0 1 to -sleep 0 for 1 whole second after a success)
	- naps should not reset transfer limits, thus maintain the validity of throughput calculations
	- second argument should probably be number of iterations instead

TODO: have `void` also output what items were voided as an afteraction

TODO: support --flags alongside -flags (just s/--/- and you're done)
TODO: kebab-case support for flags alongside the snake_case support (again with a regex replace)

TODO: milo-style gui for using hopper.lua as a storage system

TODO: AE2-style machine autocrafting (crafting table autocrafting can be made with a turtle autocrafter)
	Stage 1: have hopper.lua use AE2 for autocrafting (equivalent to an exporter with a crafting card)
    Stage 2: implement a cc-based autocrafter that functions similarly to AE2 to interface with hopper.lua
		- autocrafting should be a property of -storages, crafting using materials in said storage

TODO: conditional transfer
 - based on redstone
	- use redstone event to watch for redstone, then queue that to control the next transfer operation
	- NO guarantees about transfer amount. no redstone pulses please
		- "for more precise control, use the lua api."
	- cli:
		-redstone_enabled {side}
		-redstone_disabled {side}
		- {side} can be a glob, so `*` to watch all sides or | to watch multiple sides
		
 - based on whether the previous command succeeded?
  	- items can block each other, thus you can make a transfer happen only if that slot is free by passing items through said slot


TODO: -volatile_storage - like -storage but without the caching (til but you throw away the caches every iteration)
TODO: aggregation similar to -volatile_storage should happen by default to all UWP item storages


TODO: `//` comments
TODO: hopper repl to avoid restarts when using `-storage`

TODO: TIL speed up item pulling operations by transferring full slots directly into empty slots if there are any
TODO: TIL speed up item pushing operations by transferring directly from full slots into empty slots




TODO: -spread to distribute items evenly

TODO: rice cooker functionality
	cut off power when temperature rises to above 100C

TODO: integrate with an LLM to get some of that venture capital

TODO: negative index should count from the last slot (-1 for last slot)

TODO: request logistics (factorio requester/provider chests)
 - kanban?

